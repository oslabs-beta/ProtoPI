openapi: 3.0.1
info:
  title: Example API
  description: This is a sample API to demonstrate an OpenAPI specification with multiple servers and diverse endpoints.
  version: 1.0.0
servers:
  - url: https://{environment}.api.example.com/v1
    description: Main server with environment variable
    variables:
      environment:
        default: "api"
        description: "API environment"
        enum:
          - "api"
          - "staging"
          - "dev"
      version:
        default: "v1"
        description: "API version"
    x-main-info:
      maintainer: "api-team@example.com"
      notes: "Main production server"
  - url: https://staging.api.example.com/{version}
    description: Staging server with version variable
    variables:
      version:
        default: "v1"
        description: "API version"
        enum:
          - "v1"
          - "v2"
    x-staging-info:
      maintainer: "staging-team@example.com"
      notes: "Used for staging and testing"
  - url: http://localhost:3000/{version}
    description: Local development server with version variable
    variables:
      version:
        default: "v1"
        description: "API version"
    x-local-info:
      maintainer: "dev-team@localhost"
      notes: "Only for local development use"
      adminContact: "admin@localhost"

paths:
  /users:
    get:
      summary: Get a list of users
      description: Returns a list of users.
      responses:
        '200':
          description: A JSON array of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a user
      description: Creates a new user in the system.
      requestBody:
        description: User to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Returns a single user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The user's ID
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update user by ID
      description: Updates the details of an existing user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The user's ID
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      summary: Delete user by ID
      description: Deletes a user from the system.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The user's ID
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

  /products:
    get:
      summary: Get a list of products
      description: Returns a list of products.
      responses:
        '200':
          description: A JSON array of product objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a product
      description: Creates a new product in the system.
      requestBody:
        description: Product to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{productId}:
    get:
      summary: Get product by ID
      description: Returns a single product.
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The product's ID
      responses:
        '200':
          description: A product object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      summary: Update product by ID
      description: Updates the details of an existing product.
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The product's ID
      requestBody:
        description: Updated product object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    delete:
      summary: Delete product by ID
      description: Deletes a product from the system.
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The product's ID
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found

  /orders:
    get:
      summary: Get a list of orders
      description: Returns a list of orders.
      responses:
        '200':
          description: A JSON array of order objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create an order
      description: Creates a new order in the system.
      requestBody:
        description: Order to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{orderId}:
    get:
      summary: Get order by ID
      description: Returns a single order.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: The order's ID
      responses:
        '200':
          description: An order object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    put:
      summary: Update order by ID
      description: Updates the details of an existing order.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: The order's ID
      requestBody:
        description: Updated order object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    delete:
      summary: Delete order by ID
      description: Deletes an order from the system.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: The order's ID
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found

  /categories:
    get:
      summary: Get a list of categories
      description: Returns a list of categories.
      responses:
        '200':
          description: A JSON array of category objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a category
      description: Creates a new category in the system.
      requestBody:
        description: Category to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /categories/{categoryId}:
    get:
      summary: Get category by ID
      description: Returns a single category.
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: The category's ID
      responses:
        '200':
          description: A category object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

    put:
      summary: Update category by ID
      description: Updates the details of an existing category.
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: The category's ID
      requestBody:
        description: Updated category object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

    delete:
      summary: Delete category by ID
      description: Deletes a category from the system.
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: The category's ID
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found

  /reviews:
    get:
      summary: Get a list of reviews
      description: Returns a list of reviews.
      responses:
        '200':
          description: A JSON array of review objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
    post:
      summary: Create a review
      description: Creates a new review in the system.
      requestBody:
        description: Review to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

  /reviews/{reviewId}:
    get:
      summary: Get review by ID
      description: Returns a single review.
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
          description: The review's ID
      responses:
        '200':
          description: A review object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Review not found

    put:
      summary: Update review by ID
      description: Updates the details of an existing review.
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
          description: The review's ID
      requestBody:
        description: Updated review object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Review not found

    delete:
      summary: Delete review by ID
      description: Deletes a review from the system.
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
          description: The review's ID
      responses:
        '204':
          description: Review deleted successfully
        '404':
          description: Review not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: '123'
        username:
          type: string
          example: 'johndoe'
        email:
          type: string
          format: email
          example: 'john.doe@example.com'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        dateOfBirth:
          type: string
          format: date
          example: '1990-01-01'

    Product:
      type: object
      properties:
        id:
          type: string
          example: '456'
        name:
          type: string
          example: 'Laptop'
        description:
          type: string
          example: 'A high performance laptop'
        price:
          type: number
          format: float
          example: 999.99
        category:
          type: string
          example: 'Electronics'
        stock:
          type: integer
          example: 100

    Order:
      type: object
      properties:
        id:
          type: string
          example: '789'
        userId:
          type: string
          example: '123'
        productId:
          type: string
          example: '456'
        quantity:
          type: integer
          example: 2
        totalPrice:
          type: number
          format: float
          example: 1999.98
        orderDate:
          type: string
          format: date-time
          example: '2023-05-20T08:30:00Z'

    Category:
      type: object
      properties:
        id:
          type: string
          example: 'cat001'
        name:
          type: string
          example: 'Electronics'
        description:
          type: string
          example: 'Gadgets and electronic devices'

    Review:
      type: object
      properties:
        id:
          type: string
          example: 'rev001'
        productId:
          type: string
          example: '456'
        userId:
          type: string
          example: '123'
        rating:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
          example: 5
        comment:
          type: string
          example: 'Excellent product! Highly recommended.'

  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
      description: The user's ID

    productId:
      name: productId
      in: path
      required: true
      schema:
        type: string
      description: The product's ID

    orderId:
      name: orderId
      in: path
      required: true
      schema:
        type: string
      description: The order's ID

    categoryId:
      name: categoryId
      in: path
      required: true
      schema:
        type: string
      description: The category's ID

    reviewId:
      name: reviewId
      in: path
      required: true
      schema:
        type: string
      description: The review's ID

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

security:
  - ApiKeyAuth: []

tags:
  - name: users
    description: Operations related to users
  - name: products
    description: Operations related to products
  - name: orders
    description: Operations related to orders
  - name: categories
    description: Operations related to categories
  - name: reviews
    description: Operations related to reviews
