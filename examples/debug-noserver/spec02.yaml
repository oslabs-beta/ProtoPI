openapi: 3.0.1
info:
  title: Library Management API
  description: An API to manage a library system.
  version: 1.0.0
paths:
  /books:
    get:
      summary: Get all books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        description: Book to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/{bookId}:
    get:
      summary: Get a book by ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A book object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      summary: Update a book by ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Book data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      summary: Delete a book by ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Book deleted

  /members:
    get:
      summary: Get all members
      responses:
        '200':
          description: A list of members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
    post:
      summary: Add a new member
      requestBody:
        description: Member to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '201':
          description: Member added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
  /members/{memberId}:
    get:
      summary: Get a member by ID
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A member object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
    put:
      summary: Update a member by ID
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Member data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '200':
          description: Member updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
    delete:
      summary: Delete a member by ID
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Member deleted

  /loans:
    get:
      summary: Get all loans
      responses:
        '200':
          description: A list of loans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'
    post:
      summary: Create a new loan
      requestBody:
        description: Loan to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Loan'
      responses:
        '201':
          description: Loan created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
  /loans/{loanId}:
    get:
      summary: Get a loan by ID
      parameters:
        - name: loanId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A loan object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
    put:
      summary: Update a loan by ID
      parameters:
        - name: loanId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Loan data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Loan'
      responses:
        '200':
          description: Loan updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
    delete:
      summary: Delete a loan by ID
      parameters:
        - name: loanId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Loan deleted

  /authors:
    get:
      summary: Get all authors
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      requestBody:
        description: Author to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /authors/{authorId}:
    get:
      summary: Get an author by ID
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An author object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    put:
      summary: Update an author by ID
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Author data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete an author by ID
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Author deleted

  /publishers:
    get:
      summary: Get all publishers
      responses:
        '200':
          description: A list of publishers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
    post:
      summary: Add a new publisher
      requestBody:
        description: Publisher to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        '201':
          description: Publisher added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
  /publishers/{publisherId}:
    get:
      summary: Get a publisher by ID
      parameters:
        - name: publisherId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A publisher object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
    put:
      summary: Update a publisher by ID
      parameters:
        - name: publisherId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Publisher data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        '200':
          description: Publisher updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
    delete:
      summary: Delete a publisher by ID
      parameters:
        - name: publisherId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Publisher deleted

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        authorId:
          type: string
        publisherId:
          type: string
        publicationDate:
          type: string
          format: date
        pages:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Member:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        joinedAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Loan:
      type: object
      properties:
        id:
          type: string
        bookId:
          type: string
        memberId:
          type: string
        loanDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        biography:
          type: string
        birthDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Publisher:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
