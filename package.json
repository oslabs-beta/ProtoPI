{
  "name": "protopi",
  "displayName": "ProtoPI",
  "description": "OpenAPI spec file parser/creator and mock server for VS Code",
  "version": "0.0.2",
  "publisher": "oslabs-beta",
  "repository": "https://github.com/oslabs-beta/ProtoPI",
  "license": "GPL-3.0-only",
  "engines": {
    "vscode": "^1.89.0"
  },
  "categories": [
    "Programming Languages",
    "Snippets",
    "Linters",
    "Visualization",
    "Testing"
  ],
  "activationEvents": [
    "onWebviewPanel:protopi-sidebar",
    "ProtoPI.helloWorld",
    "ProtoPI.findSpecFiles",
    "ProtoPI.runPrismMock",
    "ProtoPI.openSettings"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "protopi-sidebar-view",
          "title": "ProtoPI",
          "icon": "media/logo.svg"
        }
      ]
    },
    "views": {
      "protopi-sidebar-view": [
        {
          "type": "webview",
          "id": "protopi-sidebar",
          "name": "ProtoPI",
          "icon": "media/logo.svg",
          "contextualTitle": "ProtoPI"
        }
      ]
    },
    "commands": [
      {
        "command": "ProtoPI.workShop.start",
        "category": "ProtoPI",
        "title": "Display the Workshop"
      },
      {
        "command": "ProtoPI.workShop.refresh",
        "category": "ProtoPI",
        "title": "Reload the Workshop"
      },
      {
        "command": "ProtoPI.refresh",
        "category": "ProtoPI",
        "title": "Reload Sidebar Webview",
        "icon": "$(refresh)"
      },
      {
        "command": "ProtoPI.runPrismMock",
        "category": "ProtoPI",
        "title": "Start Prism Mock Server",
        "icon": "$(run)"
      },
      {
        "command": "ProtoPI.stopPrismMock",
        "category": "ProtoPI",
        "title": "Stop Prism Mock Server"
      },
      {
        "command": "ProtoPI.findSpecFiles",
        "category": "ProtoPI",
        "title": "Display available API Specifications"
      },
      {
        "command": "ProtoPI.openSettings",
        "category": "ProtoPI",
        "title": "Open Extension Settings",
        "icon": "$(gear)"
      },
      {
        "command": "ProtoPI.runAllPrismMockServersLinearly",
        "category": "ProtoPI",
        "title": "Run All Mock Servers Linearly"
      },
      {
        "command": "ProtoPI.runAllPrismMockServersConcurrently",
        "category": "ProtoPI",
        "title": "Run All Mock Servers Concurrently"
      },
      {
        "command": "ProtoPI.stopAllPrismMockServersLinearly",
        "category": "ProtoPI",
        "title": "Shutdown All Mock Servers Linearly"
      },
      {
        "command": "ProtoPI.stopAllPrismMockServersConcurrently",
        "category": "ProtoPI",
        "title": "Shutdown All Mock Servers Concurrently"
      },
      {
        "command": "ProtoPI.listAllPrismMockServers",
        "category": "ProtoPI",
        "title": "List All Mock Servers"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "ProtoPI.refresh",
          "when": "view == protopi-sidebar",
          "group": "navigation"
        },
        {
          "command": "ProtoPI.runPrismMock",
          "when": "view == protopi-sidebar",
          "group": "1_prism"
        },
        {
          "command": "ProtoPI.stopPrismMock",
          "when": "view == protopi-sidebar",
          "group": "1_prism"
        },
        {
          "command": "ProtoPI.openSettings",
          "when": "view == protopi-sidebar",
          "group": "z_settings"
        },
        {
          "command": "ProtoPI.runAllPrismMockServersLinearly",
          "when": "view == protopi-sidebar",
          "group": "1_prism"
        },
        {
          "command": "ProtoPI.runAllPrismMockServersConcurrently",
          "when": "view == protopi-sidebar",
          "group": "1_prism"
        },
        {
          "command": "ProtoPI.stopAllPrismMockServersLinearly",
          "when": "view == protopi-sidebar",
          "group": "1_prism"
        },
        {
          "command": "ProtoPI.stopAllPrismMockServersConcurrently",
          "when": "view == protopi-sidebar",
          "group": "1_prism"
        },
        {
          "command": "ProtoPI.listAllPrismMockServers",
          "when": "view == protopi-sidebar",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "title": "ProtoPI",
      "properties": {
        "protopi.basePath": {
          "type": "string",
          "default": "",
          "description": "Base path for storing API definitions and Postman Collections"
        },
        "protopi.mockServer.port": {
          "type": "number",
          "default": 3141,
          "description": "Default port for Prism Mock Server"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run package",
    "compile": "yarn run check-types && yarn run lint && node esbuild.js",
    "watch-old": "npm-run-all -p watch:*",
    "watch": "concurrently \"rollup -c -w\" \"node esbuild.js --watch\"",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project src/tsconfig.base.json",
    "package": "yarn run check-types && yarn run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src --ext ts",
    "test": "vscode-test",
    "cleanup": "yarn run cleanup:full && yarn run cleanup:yarn",
    "cleanup:yarn": "yarn cache clean",
    "cleanup:full": "find . -type d \\( -name 'node_modules' -o -name '.vscode-test' -o -name 'dist' -o -name 'out' -o -name 'dist_dev' -o -name 'dist_prod' -o -name 'dist_tsc' -o -name 'out_tsc' \\) -exec rm -rf {} + && find . -type f \\( -name 'package-lock.json' -o -regex './.* [0-9]+\\..*' -o -name '*.timestamp-*.mjs' -o -name 'yarn.lock' \\) -exec rm -f {} + && echo 'Full cleanup completed!'",
    "cleanup:build": "find . -type d \\( -name '.vscode-test' -o -name 'dist' -o -name 'out' -o -name 'dist_dev' -o -name 'dist_prod' -o -name 'dist_tsc' -o -name 'out_tsc' \\) -exec rm -rf {} + && find . -type f \\( -name 'package-lock.json' -o -regex './.* [0-9]+\\..*' -o -name '*.timestamp-*.mjs' -o -name 'yarn.lock' \\) -exec rm -f {} + && echo 'Build cleanup completed!'"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.3.0",
    "@commitlint/config-conventional": "^19.2.2",
    "@jridgewell/sourcemap-codec": "^1.4.15",
    "@rollup/plugin-commonjs": "^26.0.1",
    "@rollup/plugin-node-resolve": "^15.2.3",
    "@rollup/plugin-terser": "^0.4.4",
    "@rollup/plugin-typescript": "^11.1.6",
    "@tsconfig/svelte": "^5.0.4",
    "@types/conventional-commits-parser": "^5.0.0",
    "@types/crypto-js": "^4.2.2",
    "@types/lodash": "^4.17.7",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.14.12",
    "@types/sortablejs": "^1.15.8",
    "@types/type-is": "^1.6.6",
    "@types/uuid": "^10.0.0",
    "@types/vscode": "^1.89.0",
    "@types/yaml": "^1.9.7",
    "@typescript-eslint/eslint-plugin": "^7.7.1",
    "@typescript-eslint/parser": "^7.7.1",
    "@vscode/test-cli": "^0.0.9",
    "@vscode/test-electron": "^2.3.9",
    "autoprefixer": "^10.4.19",
    "concurrently": "^8.2.2",
    "esbuild": "^0.20.2",
    "eslint": "^8.57.0",
    "npm-run-all": "^4.1.5",
    "postcss": "^8.4.40",
    "rollup": "^4.19.0",
    "rollup-plugin-css-only": "^4.5.2",
    "rollup-plugin-postcss": "^4.0.2",
    "rollup-plugin-svelte": "^6",
    "rollup-plugin-svg": "^2.0.0",
    "svelte-check": "^3.8.0",
    "svelte-language-server": "^0.16.13",
    "svelte-preprocess": "^6.0.2",
    "tailwindcss": "^3.4.7",
    "@babel/code-frame": "^7.24.7",
    "typescript": "^5.4.5"
  },
  "dependencies": {
    "svelte": "^4.2.17",
    "yaml": "^2.4.5",
    "@stoplight/prism-cli": "^5.8.3",
    "axios": "^1.7.2",
    "crypto-js": "^4.2.0",
    "get-port": "^7.1.0",
    "github-markdown-css": "^5.6.1",
    "lodash.memoize": "^4.1.2",
    "marked": "^13.0.2",
    "sortablejs": "^1.15.2",
    "terminate": "^2.6.1",
    "uuid": "^10.0.0"
  },
  "resolutions": {
    "sourcemap-codec": "@jridgewell/sourcemap-codec@1.4.15",
    "**/sourcemap-codec": "@jridgewell/sourcemap-codec@1.4.15"
  }
}
